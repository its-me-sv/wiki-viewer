{"version":3,"sources":["components/header/header.component.jsx","components/random-page-button/random-page-button.component.jsx","redux/search-field/search-field.types.js","components/search-box/search-box.component.jsx","redux/search-field/search-field.actions.js","redux/wikipedia-data/wikipedia-data.types.js","redux/wikipedia-data/wikipedia-data.actions.js","containers/app/app.container.js","redux/search-field/search-field.reducer.js","redux/wikipedia-data/wikipedia-data.reducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["Header","RandomPageButton","href","className","searchFieldTypes","ON_SEARCH_FIELD_CHANGE","connect","searchFieldText","searchField","dispatch","onSearchFieldChange","event","type","payload","target","value","placeholder","onChange","wikipediaDataTypes","FETCH_DATA_PENDING","FETCH_DATA_SUCCESS","FETCH_DATA_FAILURE","requestWikipediaData","phrase","fetch","mode","then","response","json","data","catch","error","App","handleEnterKey","keyCode","props","onRequestWikipediaData","document","addEventListener","this","removeEventListener","wikiData","console","log","length","JSON","stringify","React","Component","wikipediaData","wikiFetching","isPending","wikiError","fetchedData","INITIAL_STATE","searchFieldReducer","state","action","wikipediaDataFetchReducer","rootReducer","combineReducers","middlewares","thunkMiddleware","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.70caa643.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './header.styles.css';\r\n\r\nconst Header = () => (\r\n    <h1>Wikipedia Viewer</h1>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nimport './random-page-button.styles.css';\r\n\r\nconst RandomPageButton = () => (\r\n    <a \r\n        href=\"https://en.wikipedia.org/wiki/Special:Random\"\r\n        className=\"random-button\"\r\n    >Visit an random article</a>\r\n);\r\n\r\nexport default RandomPageButton;","const searchFieldTypes = {\r\n    ON_SEARCH_FIELD_CHANGE: 'ON_SEARCH_FIELD_CHANGE'\r\n};\r\n\r\nexport default searchFieldTypes;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './search-box.styles.css';\r\n\r\nimport {onSearchFieldChange} from '../../redux/search-field/search-field.actions';\r\n\r\nconst SearchBox = ({searchFieldText, onSearchFieldChange}) => {\r\n    return (\r\n        <div className=\"field\">\r\n            <span className=\"field-label\">Search Article</span>\r\n            <input\r\n                type=\"text\"\r\n                className=\"input-field\"\r\n                placeholder=\"Eg: Javascript\"\r\n                value={searchFieldText}\r\n                onChange={onSearchFieldChange}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({searchField}) => ({\r\n    searchFieldText: searchField.searchFieldText\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSearchFieldChange: event => dispatch(onSearchFieldChange(event))\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(SearchBox);","import searchFieldTypes from \"./search-field.types\";\r\n\r\nexport const onSearchFieldChange = event => ({\r\n    type: searchFieldTypes.ON_SEARCH_FIELD_CHANGE,\r\n    payload: event.target.value\r\n});","const wikipediaDataTypes = {\r\n    FETCH_DATA_PENDING: 'FETCH_DATA_PENDING',\r\n    FETCH_DATA_SUCCESS: 'FETCH_DATA_SUCCESS',\r\n    FETCH_DATA_FAILURE: 'FETCH_DATA_FAILURE'\r\n};\r\n\r\nexport default wikipediaDataTypes;","import wikipediaDataTypes from \"./wikipedia-data.types\";\r\n\r\nconst API_URL = 'https://en.wikipedia.org/w/api.php?format=json&action=query&generator=search&gsrnamespace=0&gsrlimit=10&prop=pageimages|extracts&pilimit=max&exintro&explaintext&exsentences=1&exlimit=max&gsrsearch=';\r\nconst API_CALL_BACK = '&callback=JSON_CALLBACK';\r\n\r\nconst requestWikipediaData = phrase => dispatch => {\r\n    dispatch({type:wikipediaDataTypes.FETCH_DATA_PENDING});\r\n    const urlToFetch = API_URL + phrase + API_CALL_BACK;\r\n    fetch(urlToFetch, {mode: \"no-cors\"})\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type:wikipediaDataTypes.FETCH_DATA_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type:wikipediaDataTypes.FETCH_DATA_FAILURE, payload: error}));\r\n};\r\n\r\nexport default requestWikipediaData;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './app.styles.css';\r\n\r\n// Custom Components\r\nimport Header from '../../components/header/header.component';\r\nimport RandomPageButton from '../../components/random-page-button/random-page-button.component';\r\nimport SearchBox from '../../components/search-box/search-box.component';\r\n\r\nimport requestWikipediaData from '../../redux/wikipedia-data/wikipedia-data.actions';\r\n\r\nclass App extends React.Component {\r\n\r\n    handleEnterKey = ({keyCode}) => {\r\n        if (keyCode !== 13) return;\r\n        const {onRequestWikipediaData, searchFieldText} = this.props;\r\n        onRequestWikipediaData(searchFieldText);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keypress', this.handleEnterKey);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('keypress', this.handleEnterKey);\r\n    }\r\n\r\n    render() {\r\n        const {searchFieldText, wikiData} = this.props;\r\n        console.log(wikiData);\r\n        return (\r\n            <div className=\"app-container\">\r\n                <Header />\r\n                <RandomPageButton />\r\n                <SearchBox />\r\n                {\r\n                    searchFieldText.length > 0 && wikiData\r\n                    ? <h4>Results for: {searchFieldText} {JSON.stringify(wikiData)}</h4>\r\n                    : null\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({searchField, wikipediaData}) => ({\r\n    searchFieldText: searchField.searchFieldText,\r\n    wikiFetching: wikipediaData.isPending,\r\n    wikiError: wikipediaData.error,\r\n    wikiData: wikipediaData.fetchedData\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onRequestWikipediaData: phrase => dispatch(requestWikipediaData(phrase))\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(App);","import searchFieldTypes from \"./search-field.types\";\r\n\r\nconst INITIAL_STATE = {\r\n    searchFieldText: \"\"\r\n};\r\n\r\nconst searchFieldReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case searchFieldTypes.ON_SEARCH_FIELD_CHANGE:\r\n            return {\r\n                ...state,\r\n                searchFieldText: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default searchFieldReducer;","import wikipediaDataTypes from \"./wikipedia-data.types\";\r\n\r\nconst INITIAL_STATE = {\r\n    fetchedData: null,\r\n    error: null,\r\n    isPending: null\r\n};\r\n\r\nconst wikipediaDataFetchReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case wikipediaDataTypes.FETCH_DATA_PENDING:\r\n            return {\r\n                ...state, \r\n                ...{isPending: true}\r\n            };\r\n        case wikipediaDataTypes.FETCH_DATA_SUCCESS:\r\n            return {\r\n                ...state, \r\n                ...{isPending: false, error:false, fetchedData: action.payload}\r\n            };\r\n        case wikipediaDataTypes.FETCH_DATA_FAILURE:\r\n            return {\r\n                ...state,\r\n                ...{isPending: false, error: action.payload}\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default wikipediaDataFetchReducer;","import {combineReducers} from \"redux\";\r\n\r\nimport searchFieldReducer from \"./search-field/search-field.reducer\";\r\nimport wikipediaDataFetchReducer from \"./wikipedia-data/wikipedia-data.reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    searchField: searchFieldReducer,\r\n    wikipediaData: wikipediaDataFetchReducer\r\n});\r\n\r\nexport default rootReducer;","import {createStore, applyMiddleware} from 'redux';\r\n\r\n// Middlewares\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\n\r\nimport rootReducer from \"./rootReducer\";\r\n\r\nconst middlewares = [thunkMiddleware];\r\n\r\nif (process.env.NODE_ENV === 'development')\r\n    middlewares.push(logger);\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/app/app.container';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}